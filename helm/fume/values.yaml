# Default values for fume.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global settings
nameOverride: ""
fullnameOverride: ""

# Enable/disable frontend deployment
enableFrontend: true

# Image configuration
image:
  backend:
    repository: outburnltd/fume-enterprise-server
    tag: "1.7.1"
  frontend:
    repository: outburnltd/fume-designer
    tag: "2.1.3"
  pullPolicy: IfNotPresent
  pullSecret: ""  # Optional: set to a Secret name only if namespace/service account doesn't already provide pull access

# Backend configuration
backend:
  replicaCount: 1
  
  resources:
    limits:
      cpu: 1500m
      memory: 5Gi
    requests:
      cpu: 750m
      memory: 2.5Gi
  
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Frontend configuration (when enabled)
frontend:
  replicaCount: 1
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Service configuration
service:
  backend:
    type: ClusterIP
    port: 42420
    targetPort: 42420
  frontend:
    type: ClusterIP
    port: 3000
    targetPort: 3000

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: fume.local
      paths:
        - path: /
          pathType: Prefix
          service: frontend
        - path: /api
          pathType: Prefix
          service: backend
  tls: []
  #  - secretName: fume-tls
  #    hosts:
  #      - fume.local

# Storage configuration
storage:
  snapshots:
    enabled: true
    size: 5Gi
    storageClass: ""
    accessMode: ReadWriteOnce
  templates:
    enabled: true
    size: 1Gi
    storageClass: ""
    accessMode: ReadWriteOnce
  # Optional persistent cache for preloaded FHIR packages.
  # When enabled, the backend will mount a PVC at /.fhir to cache packages across restarts
  # so clusters with blocked egress can preload packages out-of-band.
  fhirCache:
    enabled: false
    # Either reference an existing claim by name, or let the chart create one (when enabled and existingClaim is empty)
    existingClaim: ""
  size: 5Gi
  storageClass: ""
  accessMode: ReadWriteOnce

  # No extra configuration needed for the index file; it's handled via emptyDir.

# Service account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Secrets (referenced by name, not created by this chart)
secrets:
  fume: "fume-secrets"  # Name of the secret containing sensitive config (e.g., FHIR_SERVER_BASE; if BASIC auth: FHIR_SERVER_UN/FHIR_SERVER_PW)
  license: "fume-license"  # Name of the secret containing the license file; must include key: license.key.lic (must end with .lic)

# Environment variables
env:
  # Backend (FUME Engine) variables
  SERVER_PORT: "42420"
  FHIR_VERSION: "4.0.1"
  FHIR_SERVER_AUTH_TYPE: "NONE"  # BASIC or NONE
  
  # Frontend (FUME Designer) variables
  FUME_DESIGNER_HEADLINE: "FUME Designer"
  
  # Proxy configuration (optional)
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "localhost,127.0.0.1"

# ConfigMap data (non-secret values)
# Note: Required values must be provided during installation
configMap:
  # CANONICAL_BASE_URL: ""  # REQUIRED: Unique canonical identifier (typically FQDN) used in FHIR resources, e.g., https://fhir.company.com.
  # FHIR_PACKAGES: ""      # REQUIRED: Comma-separated package list (context-specific) - set via --set configMap.FHIR_PACKAGES="pkg1@x.y.z,pkg2,pkg3@a.b.c"
  # FUME_SERVER_URL: ""     # REQUIRED: Browser-facing URL to the backend; must be reachable from the user's network.

# TLS/Trust configuration for Node.js clients inside the pods
# By default, Node.js in the containers will trust the Kubernetes ServiceAccount CA
# at /var/run/secrets/kubernetes.io/serviceaccount/ca.crt via NODE_EXTRA_CA_CERTS.
# You can also mount a custom corporate CA bundle from a Secret and point Node.js to it.
tls:
  # When true (default), set NODE_EXTRA_CA_CERTS to the service account CA path.
  useServiceAccountCA: true

  # Optional: mount a Secret containing a PEM bundle (one file) with corporate/internal CAs
  # and set NODE_EXTRA_CA_CERTS to that file instead of the service account CA.
  customCA:
    enabled: false
    secretName: ""   # Name of the Secret that contains the CA bundle
    key: ca.crt      # Key in the Secret to mount (must be a single PEM file)
    mountPath: /etc/ssl/custom-ca  # Where to mount the Secret
    filename: ca.crt # Filename to give the mounted key

# Liveness and readiness probes
probes:
  backend:
    liveness:
      enabled: true
      path: /
      initialDelaySeconds: 120  # 2 minutes for warm start, will be faster on restart
      periodSeconds: 30
      timeoutSeconds: 10
      failureThreshold: 10      # Allow for slow startup (10 * 30s = 5min tolerance)
    readiness:
      enabled: true
      path: /
      initialDelaySeconds: 60   # 1 minute initial delay
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 30      # Allow up to 30 minutes for cold start (30 * 10s)
  frontend:
    liveness:
      enabled: true
      path: /
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
    readiness:
      enabled: true
      path: /
      initialDelaySeconds: 10
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 6

# Auto-scaling configuration
autoscaling:
  backend:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  frontend:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
