apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "fume.fullname" . }}-backend
  labels:
    {{- include "fume.labels" . | nindent 4 }}
    app.kubernetes.io/component: backend
    fume.outburn.dev/image: "{{ include "fume.labelValue" (printf "%s:%s" .Values.image.backend.repository (.Values.image.backend.tag | default .Chart.AppVersion)) }}"
    fume.outburn.dev/tag: "{{ include "fume.labelValue" (.Values.image.backend.tag | default .Chart.AppVersion) }}"
    app.kubernetes.io/component-version: "{{ include "fume.labelValue" (.Values.image.backend.tag | default .Chart.AppVersion) }}"
spec:
  {{- if not .Values.autoscaling.backend.enabled }}
  replicas: {{ .Values.backend.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "fume.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: backend
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      labels:
        {{- include "fume.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: backend
        fume.outburn.dev/image: "{{ include "fume.labelValue" (printf "%s:%s" .Values.image.backend.repository (.Values.image.backend.tag | default .Chart.AppVersion)) }}"
        fume.outburn.dev/tag: "{{ include "fume.labelValue" (.Values.image.backend.tag | default .Chart.AppVersion) }}"
        app.kubernetes.io/component-version: "{{ include "fume.labelValue" (.Values.image.backend.tag | default .Chart.AppVersion) }}"
    spec:
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      {{- end }}
      serviceAccountName: {{ include "fume.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: backend
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.backend.repository }}:{{ .Values.image.backend.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.backend.targetPort }}
              protocol: TCP
          {{- if .Values.probes.backend.liveness.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.probes.backend.liveness.path }}
              port: http
            initialDelaySeconds: {{ .Values.probes.backend.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.backend.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.backend.liveness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.backend.liveness.failureThreshold }}
          {{- end }}
          {{- if .Values.probes.backend.readiness.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.probes.backend.readiness.path }}
              port: http
            initialDelaySeconds: {{ .Values.probes.backend.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.backend.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.backend.readiness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.backend.readiness.failureThreshold }}
          {{- end }}
          env:
            {{- range $key, $value := .Values.env }}
            {{- if $value }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
            # Ensure Node.js trusts the appropriate CA bundle
            {{- if .Values.tls.customCA.enabled }}
            - name: NODE_EXTRA_CA_CERTS
              value: {{ printf "%s/%s" .Values.tls.customCA.mountPath .Values.tls.customCA.filename }}
            {{- else if .Values.tls.useServiceAccountCA }}
            - name: NODE_EXTRA_CA_CERTS
              value: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ include "fume.fullname" . }}-config
            - secretRef:
                name: {{ .Values.secrets.fume }}
          resources:
            {{- toYaml .Values.backend.resources | nindent 12 }}
          volumeMounts:
            - name: logs
              mountPath: /usr/fume/logs
            - name: snapshots
              mountPath: /usr/fume/snapshots
            - name: templates
              mountPath: /usr/fume/templates
            # Writable cache directory for FHIR packages (fixes EACCES on '/.fhir/packages')
            - name: fhir-cache
              mountPath: /.fhir
            # Mount license as a single file
            - name: license
              mountPath: /usr/fume/license.key.lic
              subPath: license.key.lic
              readOnly: true
            # Always writable index file (emptyDir backed)
            - name: fhir-index
              mountPath: /usr/fume/fhirPackageIndex.json
              subPath: fhirPackageIndex.json
            {{- if .Values.tls.customCA.enabled }}
            - name: custom-ca
              mountPath: {{ .Values.tls.customCA.mountPath }}
              readOnly: true
            {{- end }}
      volumes:
        - name: logs
          emptyDir: {}
        - name: snapshots
          persistentVolumeClaim:
            claimName: {{ include "fume.fullname" . }}-snapshots
        - name: templates
          persistentVolumeClaim:
            claimName: {{ include "fume.fullname" . }}-templates
        # FHIR package cache volume
        {{- if .Values.storage.fhirCache.enabled }}
        - name: fhir-cache
          persistentVolumeClaim:
            claimName: {{ if .Values.storage.fhirCache.existingClaim }}{{ .Values.storage.fhirCache.existingClaim }}{{ else }}{{ include "fume.fullname" . }}-fhir-cache{{ end }}
        {{- else }}
        - name: fhir-cache
          emptyDir: {}
        {{- end }}
        - name: license
          secret:
            secretName: {{ .Values.secrets.license }}
            items:
              - key: license.key.lic
                path: license.key.lic
        - name: fhir-index
          emptyDir: {}
        {{- if .Values.tls.customCA.enabled }}
        - name: custom-ca
          secret:
            secretName: {{ .Values.tls.customCA.secretName }}
            items:
              - key: {{ .Values.tls.customCA.key }}
                path: {{ .Values.tls.customCA.filename }}
        {{- end }}
      {{- with .Values.backend.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.backend.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.backend.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        - name: init-fhir-index
          image: busybox:1.36
          command: ["sh","-c","set -eu; FILE=/index/fhirPackageIndex.json; mkdir -p /index && [ -f \"$FILE\" ] || echo '{}' > \"$FILE\" && chmod 664 \"$FILE\" "]
          volumeMounts:
            - name: fhir-index
              mountPath: /index
